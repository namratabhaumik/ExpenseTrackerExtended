name: Fullstack CI/CD

on:
  push:
    paths:
      - "expense-tracker-backend/**"
      - "expense-tracker-frontend/**"
      - ".github/workflows/**"
  pull_request:
    paths:
      - "expense-tracker-backend/**"
      - "expense-tracker-frontend/**"
      - ".github/workflows/**"

permissions:
  contents: "read"
  id-token: "write"
  checks: "write"
  deployments: "write"

jobs:
  build-and-test-backend:
    runs-on: ubuntu-latest
    env:
      # These variables are injected from GitHub Actions repository variables.
      # For production, set REACT_APP_BACKEND_URL to your Cloud Run backend URL.
      REACT_APP_BACKEND_URL: ${{ vars.REACT_APP_BACKEND_URL }}
      REACT_APP_AWS_REGION: ${{ vars.REACT_APP_AWS_REGION }}
      REACT_APP_AWS_USER_POOL_ID: ${{ vars.REACT_APP_AWS_USER_POOL_ID }}
      REACT_APP_AWS_CLIENT_ID: ${{ vars.REACT_APP_AWS_CLIENT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          cd expense-tracker-backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          cd expense-tracker-backend
          flake8 expense_tracker --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 expense_tracker --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

      - name: Create logs directory
        run: mkdir -p expense-tracker-backend/logs

      - name: Run Django checks
        run: |
          cd expense-tracker-backend/expense_tracker
          python manage.py check
        env:
          DJANGO_SECRET_KEY: test-secret-key

      - name: Run backend tests
        run: |
          cd expense-tracker-backend/expense_tracker
          python -m pytest --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=50
        env:
          DJANGO_SECRET_KEY: test-secret-key
          COGNITO_CLIENT_ID: test-client-id
          COGNITO_CLIENT_SECRET: test-client-secret
          AWS_ACCESS_KEY_ID: test-access-key
          AWS_SECRET_ACCESS_KEY: test-secret-key
          AWS_REGION: us-east-1
          DYNAMODB_TABLE_NAME: test-expenses-table
          S3_BUCKET_NAME: test-bucket
          S3_REGION: us-east-1

      - name: Build Docker image
        run: |
          cd expense-tracker-backend
          docker build -t expense-tracker-backend:ci .

  deploy-backend:
    needs: build-and-test-backend
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: "projects/876160330159/locations/global/workloadIdentityPools/github-actions-pool/providers/github-provider"
          service_account: "cloud-run-sa@nimble-analyst-402215.iam.gserviceaccount.com"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Create Artifact Registry repository
        run: |
          gcloud artifacts repositories create expense-tracker-backend \
            --repository-format=docker \
            --location=us-central1 \
            --quiet || echo "Repository already exists"

      - name: Build and push Docker image
        run: |
          cd expense-tracker-backend
          docker build -t us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/expense-tracker-backend/expense-tracker-backend:${{ github.sha }} .
          docker push us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/expense-tracker-backend/expense-tracker-backend:${{ github.sha }}

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy expense-tracker-backend \
            --image=us-central1-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/expense-tracker-backend/expense-tracker-backend:${{ github.sha }} \
            --platform=managed \
            --region=us-central1 \
            --allow-unauthenticated \
            --port=8000 \
            --memory=1Gi \
            --set-env-vars="CLOUD_RUN=true,DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }},COGNITO_CLIENT_ID=${{ secrets.COGNITO_CLIENT_ID }},COGNITO_CLIENT_SECRET=${{ secrets.COGNITO_CLIENT_SECRET }},AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }},AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }},AWS_REGION=${{ vars.AWS_REGION }},DYNAMODB_TABLE_NAME=${{ vars.DYNAMODB_TABLE_NAME }},S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }},S3_REGION=${{ vars.S3_REGION }}"

      - name: Get Cloud Run URL
        id: get-url
        run: |
          URL=$(gcloud run services describe expense-tracker-backend --region=us-central1 --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Show deployment URL
        run: |
          echo "ðŸš€ Backend deployed to: ${{ steps.get-url.outputs.url }}"
          echo " Test your API with: curl -X POST ${{ steps.get-url.outputs.url }}/api/login/"

  build-and-test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: |
          cd expense-tracker-frontend
          npm ci

      - name: Lint frontend code
        run: |
          cd expense-tracker-frontend
          npm run lint

      - name: Run frontend tests
        run: |
          cd expense-tracker-frontend
          npm run test:coverage
        env:
          CI: false
          REACT_APP_BACKEND_URL: ${{ vars.REACT_APP_BACKEND_URL }}

      - name: Build React app
        env:
          CI: false
          REACT_APP_BACKEND_URL: ${{ vars.REACT_APP_BACKEND_URL }}
        run: |
          cd expense-tracker-frontend
          npm run build

  deploy-frontend:
    needs: build-and-test-frontend
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      checks: "write"
      deployments: "write"
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: |
          cd expense-tracker-frontend
          npm ci

      - name: Build React app
        env:
          REACT_APP_BACKEND_URL: ${{ vars.REACT_APP_BACKEND_URL }}
        run: |
          cd expense-tracker-frontend
          npm run build
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          channelId: live
          projectId: expense-tracker-frontend-1a909
          entryPoint: expense-tracker-frontend
